#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 14 21:02:20 2017

@author: zhouying
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  7 18:56:46 2017

@author: zhouying
"""

#from __future__ import division, print_function, absolute_import

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from sklearn import cross_validation
#%matplotlib inline

# Import MNIST data
#from tensorflow.examples.tutorials.mnist import input_data
#mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
data=np.loadtxt('./MNIST_data/ionosphere.txt',dtype='float32')

# Parameters
learning_rate = 0.01
training_epochs = 20
batch_size = 10
display_step = 1
examples_to_show = 10
divide_rate = 0.1
# Network Parameters
n_hidden_1 = 17 # 1st layer num features
n_hidden_2 = 128 # 2nd layer num features
n_input = 34 # MNIST data input (img shape: 28*28)

# tf Graph input (only pictures)
X = tf.placeholder("float", [None, n_input])

weights = {
    'encoder_h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),
#    'encoder_h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
#    'decoder_h1': tf.Variable(tf.random_normal([n_hidden_2, n_hidden_1])),
    'decoder_h1': tf.Variable(tf.random_normal([n_hidden_1, n_input])),
#    'decoder_h2': tf.Variable(tf.random_normal([n_hidden_1, n_input])),
}
biases = {
    'encoder_b1': tf.Variable(tf.random_normal([n_hidden_1])),
#    'encoder_b2': tf.Variable(tf.random_normal([n_hidden_2])),
#    'decoder_b1': tf.Variable(tf.random_normal([n_hidden_1])),
    'decoder_b1': tf.Variable(tf.random_normal([n_input])),
#    'decoder_b2': tf.Variable(tf.random_normal([n_input])),
}


# Building the encoder
def encoder(x):
    # Encoder Hidden layer with sigmoid activation #1
    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(x, weights['encoder_h1']),
                                   biases['encoder_b1']))
    # Decoder Hidden layer with sigmoid activation #2
#    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']),
#                                   biases['encoder_b2']))
#    return layer_2
    return layer_1


# Building the decoder
def decoder(x):
    # Encoder Hidden layer with sigmoid activation #1
    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']),
                                   biases['decoder_b1']))
    # Decoder Hidden layer with sigmoid activation #2
#    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']),
#                                   biases['decoder_b2']))
#    return layer_2
    return layer_1

# Construct model
encoder_op = encoder(X)
decoder_op = decoder(encoder_op)

# Prediction
y_pred = decoder_op
# Targets (Labels) are the input data.
y_true = X

# Define loss and optimizer, minimize the squared error
cost = tf.reduce_mean(tf.pow(y_true - y_pred, 2)) + tf.reduce_mean(tf.pow(weights['encoder_h1'],2)) + tf.reduce_mean(tf.pow(weights['decoder_h1'],2))
optimizer = tf.train.RMSPropOptimizer(learning_rate).minimize(cost)

# Initializing the variables
init = tf.global_variables_initializer()
#x_train,x_test = cross_validation.train_test_split(data,test_size=0.1)
#y_train = x_train[:,8]
#x_train = x_train[:,0:8]
#y_test = x_test[:,8]
#x_train = x_train[:,0:8]


# Launch the graph
#with tf.Session() as sess:
#    sess.run(init)
#    total_batch = int(x_train.num_examples/batch_size)
#    # Training cycle
#    for epoch in range(training_epochs):
#        # Loop over all batches
#        for i in range(total_batch):
#            batch_xs, batch_ys = x_train.next_batch(batch_size)
#            # Run optimization op (backprop) and cost op (to get loss value)
#            _, c = sess.run([optimizer, cost], feed_dict={X: batch_xs})
#        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#
#    print("Optimization Finished!")

    # Applying encode and decode over test set
#    encode_decode = sess.run(
#        y_pred, feed_dict={X: mnist.test.images[:examples_to_show]})
#    # Compare original images with their reconstructions
#    f, a = plt.subplots(2, 10, figsize=(10, 2))
#    for i in range(examples_to_show):
#        a[0][i].imshow(np.reshape(mnist.test.images[i], (28, 28)))
#        a[1][i].imshow(np.reshape(encode_decode[i], (28, 28)))
#    f.show()
#    plt.draw()
#    plt.waitforbuttonpress()


def reconstruction_error(x):
   encoder_op = tf.nn.sigmoid(tf.add(tf.matmul(x, weights['encoder_h1']),
                                   biases['encoder_b1']))
   decoder_op = tf.nn.sigmoid(tf.add(tf.matmul(encoder_op, weights['decoder_h1']),
                                   biases['decoder_b1']))

# Prediction
    
# Targets (Labels) are the input data.
    
   cost = x-decoder_op
   return cost
my_model_F1 = []
my_model_auc = []
F1 = []
auc = []
from sklearn.cross_validation import StratifiedKFold
skf = StratifiedKFold(data[:,n_input],n_folds=int(1/divide_rate))
for train_1,test_1 in skf:
    train = data[train_1,:]
    test = data[test_1,:]
    negative = []
    positive = []#np.empty([None,9])
    for i in range(train.shape[0]):
        if train[i,n_input] == 0:
            negative.append(train[i,:])
        else:
            positive.append(train[i,:])
    negative = np.array(negative)
    positive = np.array(positive)
    
    x_train_negative = negative[:,0:n_input]
    x_train_positive = positive[:,0:n_input]
    x_test = test[:,0:n_input]
    y_test = test[:,n_input]




#saver = tf.train.Saver()


#ne_po the ne means the recontruction model, po means the true labels
#b_ne_po = []
#b_ne_ne = []
#b_po_po = []
#b_po_ne = []


#the negative reconstruction model
    with tf.Session() as sess1:
        sess1.run(init)
        total_batch = int(x_train_negative.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_negative[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess1.run([optimizer, cost], feed_dict={X: batch_xs})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess1, "./model_negative.ckpt")
        b_ne = sess1.run(reconstruction_error(x_test)) 
    
        print("Sess1 Optimization Finished!")
# the positive reconstruction model 
    with tf.Session() as sess2:
        sess2.run(init)
        total_batch = int(x_train_positive.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_positive[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess2.run([optimizer, cost], feed_dict={X: batch_xs})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess2, "./model_positive.ckpt")
        b_po = sess2.run(reconstruction_error(x_test)) 
    
        print("Sess2 Optimization Finished!")

#count the recontrustion error and then compare in the two model
    b_ne = (b_ne **2)

    b_po = (b_po **2)


    b_ne_1 = b_ne.sum(axis=1)

    b_po_1 = b_po.sum(axis=1)


#predict the labels
    y_pre = []
    for i in range(b_ne.shape[0]):
        if b_ne_1[i]< b_po_1[i]:
            y_pre.append(0)
        else:
            y_pre.append(1)



##################################
#compute F1 score
    from sklearn import metrics
    my_model_F1.append(metrics.f1_score(y_test, y_pre))
    my_model_auc.append(metrics.roc_auc_score(y_test, y_pre))
#    my_model_gmean.append(metrics.gmean_score(y_test, y_pre))
    print('my model F1:',metrics.f1_score(y_test, y_pre))
    print('my model roc:',metrics.roc_auc_score(y_test, y_pre))
    


####################################
#compute the normal classification's F1 score

    from sklearn.naive_bayes import GaussianNB
    gnb = GaussianNB()
    y_pred = gnb.fit(train[:,0:n_input], train[:,n_input]).predict(x_test)
    F1.append(metrics.f1_score(y_test, y_pred))
    auc.append(metrics.roc_auc_score(y_test, y_pred))
    print('F1:',metrics.f1_score(y_test, y_pred))
    print('roc:',metrics.roc_auc_score(y_test, y_pred))
#my_model_F1 = np.array(my_model_F1)
#my_model_auc = np.array(my_model_auc)
#F1 = np.array(F1)
#auc = np.array(auc)
   
print('my_model_mean_F1',np.mean(my_model_F1))
print('my_model_mean_auc',np.mean(my_model_auc))
print('GNB_mean_F1',np.mean(F1))
print('GNB_mean_auc',np.mean(auc))