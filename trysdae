#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun  7 18:56:46 2017

@author: zhouying
"""

#from __future__ import division, print_function, absolute_import

import tensorflow as tf
import numpy as np
#import matplotlib.pyplot as plt
from sklearn import preprocessing
import vae
from myutil import classify,Smote
#%matplotlib inline

# Import MNIST data
#from tensorflow.examples.tutorials.mnist import input_data
#mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
#ionosphere yeast
data=np.loadtxt('./MNIST_data/ionosphere.txt',dtype='float32')

# Parameters
learning_rate = 0.01
training_epochs = 20
batch_size = 20
#display_step = 1
#examples_to_show = 10
divide_rate = 0.3
keep_rate = 0.5
# Network Parameters
n_hidden_1 = int(data.shape[1]*0.7)+1 # 1st layer num features
#n_hidden_2 = 128 # 2nd layer num features
n_input = data.shape[1]-1 # MNIST data input (img shape: 28*28)
scale = 0
# tf Graph input (only pictures)
X = tf.placeholder("float", [None, n_input])
X2 = tf.placeholder("float",[None,n_hidden_1])
keep_prob = tf.placeholder(tf.float32)  
weights = {
    'encoder_h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),
#    'encoder_h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),
#    'decoder_h1': tf.Variable(tf.random_normal([n_hidden_2, n_hidden_1])),
    'decoder_h1': tf.Variable(tf.random_normal([n_hidden_1, n_input])),
#    'decoder_h2': tf.Variable(tf.random_normal([n_hidden_1, n_input])),
}
biases = {
    'encoder_b1': tf.Variable(tf.random_normal([n_hidden_1])),
#    'encoder_b2': tf.Variable(tf.random_normal([n_hidden_2])),
#    'decoder_b1': tf.Variable(tf.random_normal([n_hidden_1])),
    'decoder_b1': tf.Variable(tf.random_normal([n_input])),
#    'decoder_b2': tf.Variable(tf.random_normal([n_input])),
}


# Building the encoder
def encoder(x):
    # Encoder Hidden layer with sigmoid activation #1
    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul((x+scale*tf.random_normal((n_input,))), weights['encoder_h1']),
                                   biases['encoder_b1']))
    # Decoder Hidden layer with sigmoid activation #2
#    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']),
#                                   biases['encoder_b2']))
#    return layer_2
    return layer_1


# Building the decoder
def decoder(x):
    # Encoder Hidden layer with sigmoid activation #1
    layer_1 = tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']),
                                   biases['decoder_b1']))
    # Decoder Hidden layer with sigmoid activation #2
#    layer_2 = tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']),
#                                   biases['decoder_b2']))
#    return layer_2
    return layer_1

# Construct model
encoder_op = encoder(X)
decoder_op = decoder(encoder_op)
decoder_op_1 = decoder(X2)
# Prediction
y_pred = decoder_op
# Targets (Labels) are the input data.
y_true = X

# Define loss and optimizer, minimize the squared error
cost = tf.reduce_mean(tf.pow(y_true - y_pred, 2)) #+ tf.reduce_mean(tf.pow(weights['encoder_h1'],2)) + tf.reduce_mean(tf.pow(weights['decoder_h1'],2))
optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)

# Initializing the variables
init = tf.global_variables_initializer()


def reconstruction_error(x):
   encoder_op = tf.nn.sigmoid(tf.add(tf.matmul(x, weights['encoder_h1']),
                                   biases['encoder_b1']))
#   end
   decoder_op = tf.nn.sigmoid(tf.add(tf.matmul(encoder_op, weights['decoder_h1']),
                                   biases['decoder_b1']))

# Prediction
    
# Targets (Labels) are the input data.
    
   cost = x-decoder_op
   return cost
my_model_F1 = []
my_model_auc = []
my_F1 = []
my_auc = []
my_model_gene = []
my_model_gen_auc = []
my_model_gen_f1 = []
my_model_gen_gmean = []
F1 = []
my_model_gen_smote_f1 =[]
auc = []
model_gene = []
from sklearn.cross_validation import StratifiedKFold
skf = StratifiedKFold(data[:,n_input],n_folds=int(1/divide_rate))
for train_1,test_1 in skf:
    train = data[train_1,:]
    test = data[test_1,:]
    negative = []
    positive = []#np.empty([None,9])
    
    
#     preprocessing ,normalize it into (0,1)
    min_max_scaler = preprocessing.MinMaxScaler()
    train = np.column_stack((min_max_scaler.fit_transform(train[:,0:n_input]),train[:,n_input]))
    test = np.column_stack((min_max_scaler.transform(test[:,0:n_input]),test[:,n_input]))
    # end of preprocessing
    
    #divide into negative data and positive ones
    for i in range(train.shape[0]):
        if train[i,n_input] == 0:
            negative.append(train[i,:])
        else:
            positive.append(train[i,:])
    negative = np.array(negative)
    positive = np.array(positive)
    x_train_negative = negative[:,0:n_input]
    x_train_positive = positive[:,0:n_input]
    #end of divide
    x_train_orginal = x_train_positive
    
#    genetate the x_train_positive to be balance dataset
    y_train_positive = np.ones(x_train_positive.shape[0])
    if x_train_positive.shape[0] < x_train_negative.shape[0]/2:
        gene_size = x_train_positive.shape[0]
    else:
        gene_size = x_train_negative.shape[0]-x_train_positive.shape[0]
    gene = vae.myvae(x_train_positive,y_train_positive,gene_size)
    gene = np.reshape(gene,[len(gene),x_train_positive.shape[1]])
#    gene = min_max_scaler.transform(gene)

    gene = min_max_scaler.fit_transform(gene)
    x_train_positive = np.row_stack((x_train_positive,gene))
    # end of generation
#in the process, we didn't change the original dataset such as train and test except preprocessing   
    x_train = train[:,0:n_input]
    y_train = train[:,n_input]
    x_test = test[:,0:n_input]
    y_test = test[:,n_input]


#the negative reconstruction model
    with tf.Session() as sess1:
        sess1.run(init)
        total_batch = int(x_train_negative.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_negative[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess1.run([optimizer, cost], feed_dict={X: batch_xs,keep_prob: keep_rate})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess1, "./model_negative.ckpt")
        b_ne = sess1.run(reconstruction_error(x_test)) 
        tr_ne = sess1.run(reconstruction_error(x_train)) 
    
        print("Sess1 Optimization Finished!")
# the positive reconstruction model 
    with tf.Session() as sess2:
        sess2.run(init)
        total_batch = int(x_train_positive.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_positive[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess2.run([optimizer, cost], feed_dict={X: batch_xs,keep_prob: keep_rate})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess2, "./model_positive.ckpt")
        ge_po = sess2.run(reconstruction_error(x_test)) 
        tr_po = sess2.run(reconstruction_error(x_train)) 
        print("Sess2 Optimization Finished!")

#the positive without generation model
    with tf.Session() as sess3:
        sess3.run(init)
        total_batch = int(x_train_orginal.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_orginal[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess3.run([optimizer, cost], feed_dict={X: batch_xs,keep_prob: keep_rate})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess1, "./model_negative.ckpt")
        b_po = sess3.run(reconstruction_error(x_test)) 
        tr_po_2 = sess3.run(reconstruction_error(x_train)) 
        train_gene = sess3.run([encoder_op],feed_dict = {X:x_train_orginal,keep_prob:1})
        train_gene = np.array(train_gene).reshape([x_train_orginal.shape[0],n_hidden_1])
        s = Smote(train_gene,100)
        train_gene_smote = s.over_sampling()
        train_gene_a = sess3.run([decoder_op_1],feed_dict = {X2:train_gene_smote,keep_prob:1})
        train_gene_a = np.array(train_gene_a).reshape([x_train_orginal.shape[0],n_input])
#        tr_ne = sess1.run(reconstruction_error(x_train)) 
    
        print("Sess3 Optimization Finished!")
        
    
    x_train_smote = np.row_stack([x_train_orginal,train_gene_a])
    with tf.Session() as sess4:
        sess4.run(init)
        total_batch = int(x_train_smote.shape[0]/batch_size)
    # Training cycle
        for epoch in range(training_epochs):
        # Loop over all batches
            for i in range(total_batch):
                batch_xs = x_train_smote[i*batch_size:(i+1)*batch_size,:]
            # Run optimization op (backprop) and cost op (to get loss value)
                _, c = sess4.run([optimizer, cost], feed_dict={X: batch_xs,keep_prob: keep_rate})
        # Display logs per epoch step
#        if epoch % display_step == 0:
#            print("Epoch:", '%04d' % (epoch+1),
#                  "cost=", "{:.9f}".format(c))
#    saver.save(sess1, "./model_negative.ckpt")
        b_po_s = sess4.run(reconstruction_error(x_test)) 
        tr_po_2_s = sess4.run(reconstruction_error(x_train)) 
#        tr_ne = sess1.run(reconstruction_error(x_train)) 
    
        print("Sess4 Optimization Finished!")

#count the recontrustion error and then compare in the two model
    y_pre = classify(b_ne,b_po)
    y_newpre = classify(b_ne,ge_po)        
    tr_pre = classify(tr_ne,tr_po)
    tr_pre_2 = classify(tr_ne,tr_po_2)
    y_s = classify(b_ne,b_po_s)

##################################
#compute F1 score
    from sklearn import metrics
    my_model_F1.append(metrics.f1_score(y_test, y_pre))
    my_model_auc.append(metrics.f1_score(y_train, tr_pre_2))
    my_F1.append(metrics.f1_score(y_train,tr_pre))
    my_auc.append(metrics.roc_auc_score(y_train, tr_pre))
    my_model_gene.append(metrics.f1_score(y_test, y_newpre))
    my_model_gen_auc.append(metrics.roc_auc_score(y_test, y_newpre))
    my_model_gen_smote_f1.append(metrics.f1_score(y_test, y_s))
#    my_cc.append(metrics.confusion_matrix(y_test, y_pre))
#    my_model_gmean.append(metrics.gmean_score(y_test, y_pre))
   
    print('my model test F1:',metrics.f1_score(y_test, y_pre))
    print('my model train f1:',metrics.f1_score(y_train, tr_pre_2))
    print('my model generation test F1:',metrics.f1_score(y_test, y_newpre))
#    print('my model generation g-mean:',g_mean)
#    print('my model generation auc:',metrics.roc_auc_score(y_test, y_newpre))
#    print('my model:',metrics.confusion_matrix(y_test, y_newpre))
    
    


####################################
#compute the normal classification's F1 score

    from sklearn.naive_bayes import GaussianNB
    gnb = GaussianNB()
    y_pred = gnb.fit(train[:,0:n_input], train[:,n_input]).predict(x_test)
    F1.append(metrics.f1_score(y_test, y_pred))
    auc.append(metrics.roc_auc_score(y_test, y_pred))
    
#    cc.append(metrics.roc_auc_score(y_test, y_pred))
    print('NB test F1:',metrics.f1_score(y_test, y_pred))
#    print('roc:',metrics.roc_auc_score(y_test, y_pred))
    
#    print('GBN:',metrics.confusion_matrix(y_test, y_pred))
    

#predict the generated samples
    gnb = GaussianNB()
    a = np.ones(x_train_positive.shape[0])
    b = np.zeros(x_train_negative.shape[0])
    y_predne = gnb.fit(np.row_stack((x_train_positive,x_train_negative)),np.append(a,b)).predict(x_test)
    print('NB generation test F1:',metrics.f1_score(y_test, y_predne))
    model_gene.append(metrics.f1_score(y_test, y_predne))
#    print('generation F1:',metrics.f1_score(y_test, y_predne))
#    print('generation roc:',metrics.roc_auc_score(y_test, y_predne))
#my_model_F1 = np.array(my_model_F1)
#my_model_auc = np.array(my_model_auc)
#F1 = np.array(F1)
#auc = np.array(auc)
print('##########################zhouying###################################')
print('my_model_mean_test_F1',np.mean(my_model_F1))
print('my_model_mean_train_f1',np.mean(my_model_auc))
print('my_mean_F1',np.mean(my_F1))
print('my_mean_auc',np.mean(my_auc))
#print('my_mean_cc',np.mean(my_cc))
print('my_mean_generation_F1',np.mean(my_model_gene))
print('my_mean_generation_auc',np.mean(my_model_gen_auc))
print('my_mean_generation_smote_f1',np.mean(my_model_gen_smote_f1))
print('my_mean_generation_bagging_f1',np.mean(my_model_gen_f1))
print('GNB_mean_F1',np.mean(F1))
print('GNB_mean_auc',np.mean(auc))
print('GNB_mean_generation_F1',np.mean(model_gene))
#print('mean_cc',np.mean(cc))